
# <type>(<scope>): <subject> (Max 50 char, Why is this change necessary?)
# |<----  Using a Maximum Of 50 Characters  ---->|

# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|
# Explain how the commit addresses the issue

# IMPORTANT!! Describe any side effects of the change.

# Provide links or keys to any relevant tickets, articles or other resources
# Examples: "Jira issue [ABC-123]" or "Closes Github issue #123"

# --- COMMIT END ---
# Type can be

# build: Build related changes (eg: npm related/ adding external dependencies)
# chore: A code change that external user won't see (eg: change to .gitignore file or .prettierrc file)
# feat: A new feature
# fix: A bug fix
# docs: Documentation related changes
# refactor: A code that neither fix bug nor adds a feature. (eg: You can use this when there is semantic changes like renaming a variable/ function name)
# perf: A code that improves performance
# style: A code that is related to styling
# test: Adding new test or making changes to existing test
# --------------------

# Remember to
#   - Capitalize the subject line
#   - Use the imperative mood in the subject line
#   - Do not end the subject line with a period
#   - Separate subject from body with a blank line
#   - Use the body to explain what and why vs. how
#   - Can use multiple lines with "-" for bullet points in body.
# --------------------

# FROM: https://gist.github.com/walkeratmind/40fa6ce7f0a6a1029be744631c4c3a15, Check Notes too
# For more information about this template and useful commit messages, check out
#   - https://gist.github.com/median-man/3a7c4324005e96f02691f3a20aeac26b
#   - https://gist.github.com/adeekshith/cd4c95a064977cdc6c50
#   - https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message
#   - https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
#   - https://8thlight.com/blog/kevin-liddle/2012/09/27/mind-your-git-manners.html
#
#
